define([], function() {
    return [
        "alert(\"Hello, world!\")",
        "1 + 1",
        "function my_add(a, b) { return a + b }\n\nmy_add(2, 3)\n",
        "// You will have to reload the editor or use the inspector to remove this widget\nvar state = {\n    count: 0,\n    inc: function() {state.count++}\n}\n\nvar Counter = {\n    view: function() {\n        return m(\"div\", {onclick: state.inc}, state.count)\n    }\n}\n\nvar div = document.createElement(\"div\")\ndocument.body.appendChild(div)\nm.mount(div, Counter)",
        "var div = document.createElement(\"div\")\n\nvar state = {\n    count: 0,\n    inc: function() {state.count++}\n}\n\nvar Counter = {\n    view: function() {\n        return m(\"div\",\n            m(\"button\", {onclick: function () { m.mount(div, null); document.body.removeChild(div) } }, \"X\"),\n            m(\"div\", {onclick: state.inc}, state.count)\n        )\n    }\n}\n\ndocument.body.appendChild(div)\nm.mount(div, Counter)",
        "var div = document.createElement(\"div\")\n\nvar state = {\n    count: 0,\n    inc: function() {state.count++}\n}\n\nvar Counter = {\n    view: function() {\n        return m(\"div.ba.ma3.pa3.bg-light-purple\",\n            m(\"button.fr\", {onclick: function () { m.mount(div, null); document.body.removeChild(div) } }, \"X\"),\n            m(\"div\", {onclick: state.inc}, state.count)\n        )\n    }\n}\n\ndocument.body.appendChild(div)\nm.mount(div, Counter)",
        "let div = document.createElement(\"div\")\n \nlet counter = 0\n\nfunction testButtonClicked(increment) {\n    console.log(\"testButtonClicked\")\n    counter += increment\n}\n\nconst MyComponent = {\n  view(controller, args) {\n    return m(\"div.ba.ma3.pa3.bg-light-purple\",\n      m(\"button.fr\", {onclick: function () { m.mount(div, null); document.body.removeChild(div) } }, \"X\"),\n      \"Hello world!\",\n      m(\"br\"),\n      \"counter: \" + counter,\n      m(\"button\", {onclick: testButtonClicked.bind(null, -1)}, \"-\"),\n      m(\"button\", {onclick: testButtonClicked.bind(null, 1)}, \"+\")\n    )\n  }\n}\n\ndocument.body.appendChild(div)\nm.mount(div, MyComponent)\n",
        "let div = document.createElement(\"div\")\n \nconst MyComponent = {\n  view(controller, args) {\n    return m(\"div.ba.ma3.pa3.bg-light-purple\",\n      m(\"button.fr\", {onclick: function () { m.mount(div, null); document.body.removeChild(div) } }, \"X\"),\n      m(\"iframe\", {src: \"//ecee.colorado.edu/~moddel/QEL/Papers/US7379286.pdf\", width: 800, height: 600})\n    )\n  }\n}\n\ndocument.body.appendChild(div)\nm.mount(div, MyComponent)\n",
        "// Use the \"Twirlip7.show(...)\" convenience function to display a view made by a Mithril-generating function.\n// You can add extra Tachyons.js styling for the enclosing div as an optional second parameter.\nTwirlip7.show(() => {\n    return m(\"button.bg-red.pa2.br4\", { onclick: () => alert(\"Hello world\") }, \"Hello\")\n  }, \".bg-blue.br4\"\n)",
        "// Temperature converter\n\nlet temperature_F\nlet temperature_C\n\nfunction inputF(event) {\n    temperature_F = event.target.value;\n    if (temperature_F.trim() === \"\") { temperature_C = \"\"; return }\n    temperature_C = \"\" + ((parseFloat(temperature_F) - 32) * 5 / 9)\n}\n\nfunction inputC(event) {\n    temperature_C = event.target.value;\n    if (temperature_C.trim() === \"\") { temperature_F = \"\"; return }\n    temperature_F = \"\" + (parseFloat(temperature_C) * 9 / 5 + 32)\n}\n\nTwirlip7.show(() => {\n    return m(\"div\", [\n        \"Fahrenheight\",\n        m(\"input.ma2\", { value: temperature_F, oninput: inputF }),\n        \"Celcius\",\n        m(\"input.ma2\", { value: temperature_C, oninput: inputC })\n    ])\n  }, \".bg-blue.br4\"\n)",
        "// Simple \"Done\" application\n\nlet doneItems = []\nlet text\n\nfunction input(event) {\n    text = event.target.value\n}\n\nfunction done(event) {\n    doneItems.push(text)\n    // Toast will not show up running standalone as it depends on the editor\n    Twirlip7.WorkspaceView.toast(\"did \" + text)\n    text = \"\"\n}\n\nTwirlip7.show(() => {\n    return m(\"div\", [\n        doneItems.map(item => m(\"div\", item)),\n        \"Did:\",\n        m(\"input.ma2\", { value: text, oninput: input }),\n        m(\"button.ma2\", { onclick: done }, \"Done!\")\n    ])\n}, \".bg-blue.br4\")\n",
        "// modal example\n\nlet modalVisible = false\n\nfunction showModal(content) {\n    return m(\"div\", [\n        m(\"div\", {\n            style: {\n                position: \"fixed\",\n                top: 0,\n                left: 0,\n                width: \"100%\",\n                height: \"100%\",\n                \"background-color\": \"rgba(0,0,0,0.6)\",\n                \"z-index\": 10000,\n            }\n        }),\n        m(\"div\", {\n            style: {\n                background: \"#fff\",\n                border: \"1px solid #eee\",\n                position: \"fixed\",\n                top: \"100px\",\n                left: \"100px\",\n                width: \"500px\",\n                height: \"500px\",\n                \"z-index\": 10001,\n            }\n        }, [\n            content, \n            m(\"br\"), \n            m(\"button\", {onclick: () => modalVisible = false}, \"Close modal\")\n        ])\n    ])\n}\n\nTwirlip7.show(() => {\n    return m(\"div\", [\n        m(\"button\", {onclick: () => modalVisible = true}, \"Open modal\"),\n        modalVisible ? showModal(m(\"div\", [\"My Modal\", m(\"hr\"), new Date().toISOString()])) : \"Modal closed\"\n    ])\n})\n",
        "// 3D display -- derived from three.js example: https://www.npmjs.com/package/three\n\nrequirejs([\"vendor/three\"], function(three) {\n    var scene, camera, renderer\n    var geometry, material, mesh\n    \n    function init(width, height) {\n     \n        scene = new THREE.Scene()\n     \n        camera = new THREE.PerspectiveCamera( 75, width / height, 1, 10000 )\n        camera.position.z = 1000\n     \n        geometry = new THREE.BoxGeometry( 200, 200, 200 )\n        material = new THREE.MeshBasicMaterial( { color: 0xff0000, wireframe: true } )\n     \n        mesh = new THREE.Mesh( geometry, material )\n        scene.add( mesh )\n     \n        renderer = new THREE.WebGLRenderer()\n        renderer.setSize( width, height )\n     \n        return renderer.domElement\n    }\n    \n    let animating = false\n    \n    function animate() {\n        if (!animating) { return }\n        \n        requestAnimationFrame( animate )\n        \n        mesh.rotation.x += 0.01\n        mesh.rotation.y += 0.02\n        \n        renderer.render( scene, camera )\n    }\n    \n    function animateStart() {\n        animating = true\n        animate()\n    }\n    \n    function animateStop() {\n        animating = false\n    }\n    \n    Twirlip7.show(() => {\n            return m(\"div\", {\n                id: \"test\",\n                style: {\n                    width: \"25rem\",\n                    height: \"25rem\",\n                },\n                oncreate(vnode) {\n                    vnode.dom.appendChild(init(vnode.dom.offsetWidth, vnode.dom.offsetHeight))\n                    animateStart()\n                },\n                onremove(vnode) {\n                    animateStop()\n                }\n            })\n        },\n        \".bg-green.br4\"\n    )\n})",
        "// SVG example\n\nTwirlip7.show(() => {\n    return m(\"svg\", { width: 200, height: 200},\n        m(\"circle\", {\n            cx: 100, \n            cy: 100, \n            r: 50, \n            stroke: \"green\", \n            \"stroke-width\": 4, \n            fill: \"orange\",\n        })\n    )\n})\n",
        "// SVG example with updating\n// Seems to flicker slightly\n\nlet x = 100;\nlet y = 100;\n\nfunction update() {\n    x += 1;\n    y -= 0.25;\n    m.redraw()\n}\nconst interval = setInterval(update, 100);\n\nTwirlip7.show(() => {\n    return m(\"svg\", { width: 600, height: 200},\n        m(\"rect[height='200'][width='600'][x='0'][y='0']\", {\n            style: {\"stroke\": \"black\", \"fill\": \"none\", \"stroke-width\": \"1\"}\n        }),\n        m(\"circle\", {\n            cx: x, \n            cy: y, \n            r: 50, \n            stroke: \"green\", \n            \"stroke-width\": 4, \n            fill: \"orange\",\n        })\n    )\n}, { onclose: () => clearInterval(interval) })\n",
        "// SVG example with dragging of one circle\n// May not keep up with fast drags\n\nlet draggedItem = null;\nlet dragStart = {}\nlet objectStart = {}\n\nTwirlip7.show(() => {\n    return m(\"svg\", { width: 600, height: 200},\n        m(\"rect[height='200'][width='600'][x='0'][y='0']\", {\n            style: {\"stroke\": \"black\", \"fill\": \"none\", \"stroke-width\": \"1\"}\n        }),\n        m(\"circle\", {\n            cx: 100, \n            cy: 100, \n            r: 50, \n            stroke: \"green\", \n            \"stroke-width\": 4, \n            fill: \"orange\",\n            onmousedown: (event) => {\n                draggedItem = event.target\n                dragStart = { x: event.clientX, y: event.clientY }\n                objectStart = { x: parseInt(event.target.cx.baseVal.value), y: parseInt(event.target.cy.baseVal.value) }\n            },\n            onmousemove: (event) => {\n                console.log(\"dragging\", draggedItem)\n                if (draggedItem === event.target) { \n                    const dx = event.clientX - dragStart.x\n                    const dy = event.clientY - dragStart.y\n                    const newX = objectStart.x + dx\n                    const newY = objectStart.y + dy\n                    event.target.setAttribute(\"cx\", newX)\n                    event.target.setAttribute(\"cy\", newY)\n                }\n            },\n            onmouseup: () => {\n                draggedItem = null\n                console.log(\"stop dragging\", draggedItem)\n            },\n        })\n    )\n}, { onclose: () => clearInterval(interval) })\n",
        "// SVG example with dragging of three circles\n// May not keep up with fast drags\n// Also issues when drag lower-Z circle over upper-Z circle\n\nlet draggedItem = null;\nlet dragStart = {}\nlet objectStart = {}\n\nfunction onmousedownCircle(event) {\n    draggedItem = event.target\n    dragStart = { x: event.clientX, y: event.clientY }\n    objectStart = { x: parseInt(event.target.cx.baseVal.value), y: parseInt(event.target.cy.baseVal.value) }\n}\n\nfunction onmousemoveCircle(event) {\n    console.log(\"dragging\", draggedItem)\n    if (draggedItem === event.target) { \n        const dx = event.clientX - dragStart.x\n        const dy = event.clientY - dragStart.y\n        const newX = objectStart.x + dx\n        const newY = objectStart.y + dy\n        event.target.setAttribute(\"cx\", newX)\n        event.target.setAttribute(\"cy\", newY)\n    }\n}\n\nfunction onmouseupCircle() {\n    draggedItem = null\n    console.log(\"stop dragging\", draggedItem)\n}\n\nTwirlip7.show(() => {\n    return m(\"svg\", { width: 600, height: 200},\n        m(\"rect[height='200'][width='600'][x='0'][y='0']\", {\n            style: {\"stroke\": \"black\", \"fill\": \"none\", \"stroke-width\": \"1\"}\n        }),\n        m(\"circle\", {\n            cx: 100, \n            cy: 100, \n            r: 50, \n            stroke: \"green\", \n            \"stroke-width\": 4, \n            fill: \"orange\",\n            onmousedown: onmousedownCircle,\n            onmousemove: onmousemoveCircle,\n            onmouseup: onmouseupCircle,\n        }),\n        m(\"circle\", {\n            cx: 200, \n            cy: 100, \n            r: 40, \n            stroke: \"blue\", \n            \"stroke-width\": 2, \n            fill: \"yellow\",\n            onmousedown: onmousedownCircle,\n            onmousemove: onmousemoveCircle,\n            onmouseup: onmouseupCircle,\n        }),\n        m(\"circle\", {\n            cx: 400, \n            cy: 100, \n            r: 60, \n            stroke: \"orange\", \n            \"stroke-width\": 7, \n            fill: \"green\",\n            onmousedown: onmousedownCircle,\n            onmousemove: onmousemoveCircle,\n            onmouseup: onmouseupCircle,\n        })\n    )\n}, { onclose: () => clearInterval(interval) })\n",
        "// HTML dragging example -- works in Firefox but has an offset issue with Chrome\n\nconst draggables = { \n    1: {x: 0, y: 0},\n    2: {x: 0, y: 0},\n    3: {x: 0, y: 0},\n    4: {x: 0, y: 0},\n}\n\nlet dragStart\n\nTwirlip7.show(() => {\n    return m(\"div.bg-gray.h5.w100\", { ondragover: (e) => e.preventDefault(), ondrop: (e) => e.preventDefault() },\n        Object.keys(draggables).map((number) => m(\"div.di.ba.pa2.ma2.relative.bg-green\", {\n            draggable: true,\n            style: {\n                cursor: \"move\",\n                top: draggables[number].y + \"px\",\n                left: draggables[number].x + \"px\",\n            },\n            ondragstart: (e) => {\n                dragStart = {x: e.screenX, y: e.screenY}\n                console.log(\"ondragstart\", dragStart, e)\n                e.dataTransfer.setData('text/plain', number)\n                e.dataTransfer.effectAllowed = \"move\"\n            },\n            ondragend: (e) => {\n                const d = draggables[number]\n                console.log(\"ondragend d\", d)\n                const s = dragStart;\n                console.log(\"ondragend s\", s)\n                draggables[number] = {x: d.x + e.screenX - s.x, y: d.y + e.screenY - s.y}\n                console.log(\"ondragend\", draggables[number])\n            },\n            onclick: () => alert(\"Hello from draggable #\" + number)\n        }, \"Drag me! \" + number))\n      )\n    }, \".bg-blue.br4\"\n)",
        "// HTML dragging example better -- works in Firefox but has an offset issue with Chrome\n\nconst draggables = { \n    1: {x: 0, y: 0, action: `alert(\"Hello from draggable #1\")`},\n    2: {x: 0, y: 50, action: `alert(\"Hello from draggable #2\")`},\n    3: {x: 0, y: 100, action: `alert(\"Hello from draggable #3\")`},\n    4: {x: 0, y: 150, name: \"Make new item\", action: makeNewItem },\n    5: {x: 0, y: 200, name: \"In memory of James R. Beniger\", action: `open(\"https://en.wikipedia.org/wiki/Beniger,_James_R.\")` },\n    6: {x: 0, y: 250, name: \"Log Draggables\", action: `console.log(\"draggables\", context.draggables)` },\n}\n\nfunction makeNewItem(context) {\n    console.log(\"makeNewItem\", context)\n    const name = prompt(\"new name?\")\n    if (!name) return\n    context.draggables[new Date().toISOString()] = {x: 0, y: 0, name: name }\n}\n\nlet dragStart\n\nTwirlip7.show(() => {\n    return m(\"div.bg-gray.h5.w100.relative\", { ondragover: (e) => e.preventDefault(), ondrop: (e) => e.preventDefault() },\n        Object.keys(draggables).map((number) => m(\"div.di.ba.pa2.ma2.bg-green.absolute\", {\n            draggable: true,\n            style: {\n                cursor: \"move\",\n                top: draggables[number].y + \"px\",\n                left: draggables[number].x + \"px\",\n            },\n            ondragstart: (e) => {\n                dragStart = {x: e.screenX, y: e.screenY}\n                e.dataTransfer.setData('text/plain', number)\n                e.dataTransfer.effectAllowed = \"move\"\n            },\n            ondragend: (e) => {\n                const d = draggables[number]\n                const s = dragStart;\n                draggables[number].x = d.x + e.screenX - s.x\n                draggables[number].y = d.y + e.screenY - s.y\n            },\n            onclick: draggables[number].action ? function() {\n                const context = { draggables }\n                const action = draggables[number].action\n                typeof action === \"string\" ?\n                    eval(draggables[number].action) :\n                    action(context)\n            }: (() => undefined)\n        }, draggables[number].name || (\"Drag me! \" + number)))\n      )\n    }, \".bg-blue.br4\"\n)\n",
        "// HTML dragging example simplification to one item\n\nconst draggable = {\n    x: 0,\n    y: 0,\n    \"name\": \"Twirlip\",\n    action: () => open(\"https://github.com/pdfernhout/Twirlip7\") \n}\n\nlet dragStart\n\nTwirlip7.show(() => {\n    return m(\"div.di.ba.pa2.ma2.relative.bg-green\", {\n            draggable: true,\n            style: {\n                cursor: \"move\",\n                top: draggable.y + \"px\",\n                left: draggable.x + \"px\",\n            },\n            ondragstart: (event) => {\n                dragStart = {x: event.screenX, y: event.screenY}\n                event.dataTransfer.setData('text/plain', \"Button\")\n                event.dataTransfer.effectAllowed = \"move\"\n            },\n            ondragend: (event) => {\n                const s = dragStart;\n                draggable.x = draggable.x + event.screenX - dragStart.x\n                draggable.y = draggable.y + event.screenY - dragStart.y\n            },\n            onclick: draggable.action\n        }, draggable.name\n      )\n    }, \".bg-blue.br4\"\n)\n",
        "// Extend the application\n// To make this new button go away, you either need to reload the page or use extensionsUninstall\n\nTwirlip7.WorkspaceView.extensionsInstall({\n    id: \"test\",\n    // For tags, try header, middle, and footer\n    tags: \"header\",\n    code: (context) => {\n        return m(\"button.ma1\", {onclick: alert.bind(null, \"test\")}, \"Test of changing application!\")\n    }\n})\n\n// Twirlip7.WorkspaceView.extensionsUninstall({id: \"test\"})\n",
        "// Extend the application\n// To make this new button go away, you either need to reload the page or use extensionsUninstall\n\nconst searchResults = []\n\nfunction search() {\n    searchResults.splice(0)\n    const journal = Twirlip7.getCurrentJournal()\n    const searchText = prompt(\"search string\")\n    if (!searchText) return\n    for (let i = 0; i < journal.itemCount(); i++) {\n        const item = journal.getItemForLocation(i)\n        if (item && item.indexOf(searchText) !== -1) {\n            const key = journal.keyForLocation(i)\n            console.log(\"item\", i, key)\n            searchResults.push({i, key, item})\n        }\n    }\n}\n\nfunction load(key) {\n    Twirlip7.WorkspaceView.currentItemIndex = key\n}\n\nTwirlip7.WorkspaceView.extensionsInstall({\n    id: \"search\",\n    // For tags, try header, middle, and footer\n    tags: \"header\",\n    code: (context) => {\n        return m(\"div\",\n            searchResults.map((result) => {\n                return m(\"div\", {\n                    title: result.item, \n                    onclick: Twirlip7.WorkspaceView.goToKey.bind(null, result.key)\n                }, \"\" + (result.i + 1) + \") \" + result.item.substring(0, 100) + \"...\")\n            }),\n            m(\"button.ma1\", {onclick: search}, \"Search\"),\n            m(\"button.ma1\", {onclick: () => searchResults.splice(0)}, \"Clear results\")\n        )\n    }\n})\n\n// Twirlip7.WorkspaceView.extensionsUninstall({id: \"search\"})\n",
        "Twirlip7.getCurrentJournal().addItem(\"// Test of making a journal item from eval\\n\\nalert(\\\"hello world!\\\")\")"
    ]  
})
