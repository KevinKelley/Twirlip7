define([], function() {
    return [
        "alert(\"Hello, world!\")",
        "1 + 1",
        "function my_add(a, b) { return a + b }\n\nmy_add(2, 3)\n",
        "// You will have to reload the editor or use the inspector to remove this widget\nvar state = {\n    count: 0,\n    inc: function() {state.count++}\n}\n\nvar Counter = {\n    view: function() {\n        return m(\"div\", {onclick: state.inc}, state.count)\n    }\n}\n\nvar div = document.createElement(\"div\")\ndocument.body.appendChild(div)\nm.mount(div, Counter)",
        "var div = document.createElement(\"div\")\n\nvar state = {\n    count: 0,\n    inc: function() {state.count++}\n}\n\nvar Counter = {\n    view: function() {\n        return m(\"div\",\n            m(\"button\", {onclick: function () { document.body.removeChild(div) } }, \"X\"),\n            m(\"div\", {onclick: state.inc}, state.count)\n        )\n    }\n}\n\ndocument.body.appendChild(div)\nm.mount(div, Counter)",
        "var div = document.createElement(\"div\")\n\nvar state = {\n    count: 0,\n    inc: function() {state.count++}\n}\n\nvar Counter = {\n    view: function() {\n        return m(\"div.ba.ma3.pa3.bg-light-purple\",\n            m(\"button.fr\", {onclick: function () { document.body.removeChild(div) } }, \"X\"),\n            m(\"div\", {onclick: state.inc}, state.count)\n        )\n    }\n}\n\ndocument.body.appendChild(div)\nm.mount(div, Counter)",
        "let div = document.createElement(\"div\")\n \nlet counter = 0\n\nfunction testButtonClicked(increment) {\n    console.log(\"testButtonClicked\")\n    counter += increment\n}\n\nconst MyComponent = {\n  view(controller, args) {\n    return m(\"div.ba.ma3.pa3.bg-light-purple\",\n      m(\"button.fr\", {onclick: function () { document.body.removeChild(div) } }, \"X\"),\n      \"Hello world!\",\n      m(\"br\"),\n      \"counter: \" + counter,\n      m(\"button\", {onclick: testButtonClicked.bind(null, -1)}, \"-\"),\n      m(\"button\", {onclick: testButtonClicked.bind(null, 1)}, \"+\")\n    )\n  }\n}\n\ndocument.body.appendChild(div)\nm.mount(div, MyComponent)\n",
        "let div = document.createElement(\"div\")\n \nconst MyComponent = {\n  view(controller, args) {\n    return m(\"div.ba.ma3.pa3.bg-light-purple\",\n      m(\"button.fr\", {onclick: function () { document.body.removeChild(div) } }, \"X\"),\n      m(\"iframe\", {src: \"http://www.calphysics.org/haisch/Patent%207379286\", width: 800, height: 600})\n    )\n  }\n}\n\ndocument.body.appendChild(div)\nm.mount(div, MyComponent)\n",
        "// Use the \"show\" convenience function to display a view made by a Mithril-generating function.\n// You can add extra Tachyons.js styling for the enclosing div as an optional second parameter.\nshow(() => {\n    return m(\"button.bg-red.pa2.br4\", { onclick: () => alert(\"Hello world\") }, \"Hello\")\n  }, \".bg-blue.br4\"\n)",
        "const draggables = { \n    1: {x: 0, y: 0},\n    2: {x: 0, y: 0},\n    3: {x: 0, y: 0},\n    4: {x: 0, y: 0},\n}\n\nlet dragStart\n\nshow(() => {\n    return m(\"div.bg-gray.h5.w100\", { ondragover: (e) => e.preventDefault() },\n        Object.keys(draggables).map((number) => m(\"div.di.ba.pa2.ma2.relative.bg-green\", {\n            draggable: true,\n            style: {\n                cursor: \"move\",\n                top: draggables[number].y + \"px\",\n                left: draggables[number].x + \"px\",\n            },\n            ondragstart: (e) => {\n                dragStart = {x: e.x, y: e.y}\n                e.dataTransfer.setData('text/plain', number)\n                event.dataTransfer.effectAllowed = \"move\"\n            },\n            ondragend: (e) => {\n                const d = draggables[number]\n                const s = dragStart;\n                draggables[number] = {x: d.x + e.x - s.x, y: d.y + e.y - s.y}\n            },\n            onclick: () => alert(\"Hello from draggable #\" + number)\n        }, \"Drag me! \" + number))\n      )\n    }, \".bg-blue.br4\"\n)",
    ]
})
